generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  EMPLOYEE
  ADMIN
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String

  role Role

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  companyId Int? // Relacionamento com a empresa
  company   Company? @relation(fields: [companyId], references: [id])

  employeeId Int?      @unique// Referência opcional ao Employee
  employee   Employee? @relation(fields: [employeeId], references: [id])

  clientAppointments     Appointment[] @relation("client") // Agendamentos feitos pelo usuário (cliente)
}

model GuestClient {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  appointments Appointment[] // Agendamentos feitos pelo cliente convidado
}

model Company {
  id          Int       @id @default(autoincrement())

  name        String
  description String?
  email       String    @unique
  phone       String
  address     String?

  link        String    @unique   // Link personalizado para a empresa

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()

  employees   Employee[] // Relacionamento com funcionários (usuários)
  services    Service[] // Serviços oferecidos

  subscriptions Subscription[] // Assinaturas ativas

  users       User[] // Usuários da empresa

  category    Category[] // Categorias de serviços
}

model Employee {
  id        Int      @id @default(autoincrement())
  name      String
  position  String? // Cargo do funcionário (ex.: Gerente, Recepcionista, etc.)
  phone     String?

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  serviceInterval  Int    @default(30)// Intervalo entre agendamentos (em minutos)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  appointments Appointment[] @relation("employee")// Agendamentos gerenciados pelo funcionário

  user User? @relation()
  employeeServices    EmployeeServices[] // Serviços prestados pelo funcionário
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    
  description String?

  companyId   Int
  company     Company   @relation(fields: [companyId], references: [id])

  services    Service[]

  @@unique([companyId, name])
}

model Service {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  duration     Int // Em minutos
  price        Float
  companyId    Int // Relacionamento com a empresa
  company      Company       @relation(fields: [companyId], references: [id])
  appointments Appointment[] // Agendamentos desse serviço

  employeeServices    EmployeeServices[] // Funcionários que prestam esse serviço

  categoryId   Int
  category     Category @relation(fields: [categoryId], references: [id])
}

model EmployeeServices {
  id         Int       @id @default(autoincrement())
  employeeId Int
  serviceId  Int

  employee   Employee  @relation(fields: [employeeId], references: [id])
  service    Service   @relation(fields: [serviceId], references: [id])

  @@unique([employeeId, serviceId]) // Garante que um funcionário não preste o mesmo serviço mais de uma vez
}

enum Status {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Appointment {
  id     Int      @id @default(autoincrement())
  date   DateTime
  status Status   @default(PENDING) // Status do agendamento

  clientId Int? // Cliente que fez o agendamento
  client   User? @relation(fields: [clientId], references: [id], name: "client")

  guestClientId Int? // Cliente convidado
  guestClient   GuestClient? @relation(fields: [guestClientId], references: [id])

  employeeId Int // Funcionário responsável
  employee   Employee @relation(fields: [employeeId], references: [id], name: "employee")

  serviceId Int // Serviço agendado
  service   Service @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  payment Payment? // Pagamento associado
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  ONLINE
  OFFLINE
}

model Payment {
  id             Int             @id @default(autoincrement())
  amount         Float
  status         PaymentStatus   @default(PENDING)

  method         PaymentMethod   
  stripePaymentId String?        @unique   // ID do pagamento no Stripe (se online)

  appointmentId  Int             @unique  // Relacionamento com o agendamento
  appointment    Appointment     @relation(fields: [appointmentId], references: [id])

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt()
}

enum PlanType {
  TRIAL
  PRO
}

model Plan {
  id          Int       @id @default(autoincrement())
  name        PlanType  @unique // Nome do plano (ex: "Grátis", "PRO")
  description String?   // Descrição do plano
  price       Float     // Valor do plano
  duration    Int       // Duração em dias (ex: 15, 30, etc.)
  isActive    Boolean   @default(true) // Plano ativo ou não
  subscriptions Subscription[]
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
}

enum Provider {
  STRIPE
  APPLE
  GOOGLE
}

model Subscription {
  id                Int              @id @default(autoincrement())
  status            SubscriptionStatus @default(ACTIVE)

  provider          Provider?         // Provedor de pagamento (Stripe, Apple, Google, etc.)
  subscriptionId    String?           @unique        // ID da assinatura

  companyId         Int              @unique// Relacionamento com a empresa
  company           Company          @relation(fields: [companyId], references: [id])

  planId            Int              // Relacionamento com o plano
  plan              Plan             @relation(fields: [planId], references: [id])

  startDate         DateTime         @default(now())
  endDate           DateTime?
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt()
}