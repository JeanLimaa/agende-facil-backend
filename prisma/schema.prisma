generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  EMPLOYEE
  ADMIN
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String

  role Role

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  companyId Int? // Relacionamento com a empresa
  company   Company? @relation(fields: [companyId], references: [id])

  employeeId Int?      @unique// Referência opcional ao Employee
  employee   Employee? @relation(fields: [employeeId], references: [id])

  @@map("users")
}

model Client {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String
  
  companyId Int // Relacionamento com a empresa
  company  Company @relation(fields: [companyId], references: [id])

  email     String? @unique // Email do cliente convidado (opcional)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  appointments Appointment[] // Agendamentos feitos pelo cliente convidado

  isBlocked Boolean @default(false) // Indica se o cliente está bloqueado

  @@map("clients")
}

model Company {
  id          Int       @id @default(autoincrement())

  name        String
  description String?
  email       String    @unique
  phone       String
  address     String?

  link        String    @unique   // Link personalizado para a empresa

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()

  intervalBetweenAppointments Int @default(15) // Intervalo entre agendamentos (em minutos)

  websiteImageUrl String? // URL da imagem do site da empresa

  employees   Employee[] // Relacionamento com funcionários (usuários)
  services    Service[] // Serviços oferecidos
  subscriptions Subscription[] // Assinaturas ativas
  users       User[] // Usuários da empresa
  category    Category[] // Categorias de serviços
  clients Client[]
  companyAddress CompanyAddress? // Endereço da empresa
  companyWorkingHours CompanyWorkingHour[] // Horários de funcionamento da empresa

  @@map("companies")
}

model Employee {
  id        Int      @id @default(autoincrement()) @unique
  name      String
  position  String? // Cargo do funcionário (ex.: Gerente, Recepcionista, etc.)
  phone     String?

  startHour String? // Horário de início do expediente - OBS: COLOCAR COMO OBRIGATORIO DPS
  endHour   String? // Horário de término do expediente
  serviceInterval  Int    @default(30)// Intervalo entre agendamentos (em minutos)

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  displayOnline Boolean @default(true) // Indica se o funcionário deve ser exibido online
  profileImageUrl String?

  user User? @relation()
  appointments Appointment[] @relation("employee")// Agendamentos gerenciados pelo funcionário
  employeeCategories    EmployeeCategory[] // Serviços prestados pelo funcionário
  workingHours EmployeeWorkingHour[] // Horários de trabalho do funcionário

  @@map("employees")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    
  description String?

  companyId   Int
  company     Company   @relation(fields: [companyId], references: [id])

  services    Service[]

  employeeCategories EmployeeCategory[]

  @@unique([companyId, name])

  @@map("categories")
}

model Service {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  duration     Int // Em minutos
  price        Decimal @db.Decimal(10, 2)
  companyId    Int // Relacionamento com a empresa
  company      Company       @relation(fields: [companyId], references: [id])
  appointments AppointmentService[] // Agendamentos desse serviço

  //employeeCategory    EmployeeCategory[] // Funcionários que prestam esse serviço

  categoryId   Int
  category     Category @relation(fields: [categoryId], references: [id])

  @@map("services")
}

model EmployeeCategory {
  id         Int       @id @default(autoincrement())

  employeeId Int
  employee   Employee  @relation(fields: [employeeId], references: [id])

  categoryId Int
  category   Category  @relation(fields: [categoryId], references: [id])
  //serviceId  Int
  //service    Service   @relation(fields: [serviceId], references: [id])
  

  @@unique([employeeId, categoryId]) // Garante que um funcionário não preste o mesmo serviço mais de uma vez
  @@map("employee_categories")
}

enum Status {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Appointment {
  id     Int      @id @default(autoincrement())
  date   DateTime
  status Status   @default(PENDING) // Status do agendamento

  clientId Int // Cliente que fez o agendamento
  client   Client @relation(fields: [clientId], references: [id])

  employeeId Int // Funcionário responsável
  employee   Employee @relation(fields: [employeeId], references: [id], name: "employee")

  subTotalPrice Decimal @db.Decimal(10, 2) // Preço subtotal do agendamento
  discount     Decimal @db.Decimal(10, 2) @default(0) // Desconto aplicado (se houver)
  totalPrice Decimal @db.Decimal(10, 2) // Preço total do agendamento

  totalDuration Int  // Duração total do agendamento ( em minutos )

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  payment Payment? // Pagamento associado
  appointmentServices AppointmentService[] // Serviços agendados

  isBlock Boolean @default(false) // Indica se é bloqueio de agenda

  @@map("appointments")
}


model AppointmentService {
  id            Int        @id @default(autoincrement())

  appointmentId Int
  appointment   Appointment @relation(fields: [appointmentId], references: [id])

  serviceId     Int
  service       Service     @relation(fields: [serviceId], references: [id])

  @@unique([appointmentId, serviceId]) // Garante que um serviço não seja duplicado em um mesmo agendamento
  @@map("appointment_services")
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  ONLINE
  OFFLINE
}

model Payment {
  id             Int             @id @default(autoincrement())
  amount         Decimal @db.Decimal(10, 2)
  status         PaymentStatus   @default(PENDING)

  method         PaymentMethod   
  stripePaymentId String?        @unique   // ID do pagamento no Stripe (se online)

  appointmentId  Int             @unique  // Relacionamento com o agendamento
  appointment    Appointment     @relation(fields: [appointmentId], references: [id])

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt()

  @@map("payments")
}

enum PlanType {
  TRIAL
  PRO
}

model Plan {
  id          Int       @id @default(autoincrement())
  name        PlanType  @unique // Nome do plano (ex: "Grátis", "PRO")
  description String?   // Descrição do plano
  price       Decimal @db.Decimal(10, 2)     // Valor do plano
  duration    Int       // Duração em dias (ex: 15, 30, etc.)
  isActive    Boolean   @default(true) // Plano ativo ou não
  subscriptions Subscription[]

  @@map("plans")
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
}

enum Provider {
  STRIPE
  APPLE
  GOOGLE
}

model Subscription {
  id                Int              @id @default(autoincrement())
  status            SubscriptionStatus @default(ACTIVE)

  provider          Provider?         // Provedor de pagamento (Stripe, Apple, Google, etc.)
  subscriptionId    String?           @unique        // ID da assinatura

  companyId         Int              @unique// Relacionamento com a empresa
  company           Company          @relation(fields: [companyId], references: [id])

  planId            Int              // Relacionamento com o plano
  plan              Plan             @relation(fields: [planId], references: [id])

  startDate         DateTime         @default(now())
  endDate           DateTime?
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt()

  @@map("subscriptions")
}

model CompanyAddress {
  id          Int      @id @default(autoincrement())
  street      String
  number      String
  neighborhood String
  city        String
  state       String
  zipCode     String
  country     String

  companyId   Int @unique
  company     Company @relation(fields: [companyId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()

  @@map("company_addresses")
}

model EmployeeWorkingHour {
  id             Int          @id @default(autoincrement())
  dayOfWeek      Int
  startTime      String
  endTime        String
  isClosed       Boolean      @default(false)
  employeeId Int
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@map("employee_working_hours")
}

model CompanyWorkingHour {
  id             Int          @id @default(autoincrement())
  dayOfWeek      Int
  startTime      String
  endTime        String
  isClosed       Boolean      @default(false)
  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  @@map("company_working_hours")
}